import software.amazon.awssdk.services.personalize.PersonalizeClient;
import software.amazon.awssdk.services.personalize.model.*;

public class RecommendationService {

    private final PersonalizeClient personalizeClient;

    public RecommendationService() {
        // initialize the Personalize client
        this.personalizeClient = PersonalizeClient.builder().region(Region.EU_NORTH_1).build();
    }

    // import data into personalise 
    public void createDatasetImportJob() {
        CreateDatasetImportJobRequest importJobRequest = new CreateDatasetImportJobRequest()
            .withJobName("import-job")
            .withDatasetArn("ecopath-dataset-arn")
            .withDataSource(new DataSource().withDataLocation("s3://hackhubbucket/data.csv"))
            .withRoleArn("rec-role");
        personalizeClient.createDatasetImportJob(importJobRequest);
    }

    // create pseronalise solution from data 
    public String createSolution(String datasetGroupArn) {
        CreateSolutionRequest solutionRequest = CreateSolutionRequest.builder()
            .name("travel-recommendation-solution")
            .datasetGroupArn(datasetGroupArn)
            .recipeArn("arn:aws:personalize:::recipe/aws-user-personalization")
            .build();
        String solutionArn = personalizeClient.createSolution(solutionRequest).solutionArn();
        return solutionArn;
    }

    // build solution
    public String createSolutionVersion(String solutionArn) {
        CreateSolutionVersionRequest solutionVersionRequest = CreateSolutionVersionRequest.builder()
            .solutionArn(solutionArn)
            .build();
        String solutionVersionArn = personalizeClient.createSolutionVersion(solutionVersionRequest).solutionVersionArn();
        return solutionVersionArn;
    }

    // build personalise campaign 
    public String createCampaign(String solutionVersionArn) {
        CreateCampaignRequest campaignRequest = new CreateCampaignRequest()
            .name("my-campaign")
            .solutionVersionArn(solutionVersionArn)
            .minProvisionedTPS(1);
        String campaignArn = personalizeClient.createCampaign(campaignRequest).getCampaignArn();
        return campaignArn;
    }


    public travelRecomendations[] getRecommendations(String campaignArn, String userId, String weather) {
    GetRecommendationsRequest recommendationsRequest = new GetRecommendationsRequest()
        .withCampaignArn(campaignArn)
        .withUserId(userId);
    List<PredictedItem> recommendations = personalizeClient.getRecommendations(recommendationsRequest).itemList();

    // places importance / changes the prioritising of recomendations based on api weather refs  

    // priority mapping based on weather value 
    Map<String, List<String>> priorities = new HashMap<>();
    priorities.put("sunny", Arrays.asList("walk", "cycle"));
    priorities.put("rainy", Arrays.asList("public_bus"));

    // priority sorting based on priority mapping 
    Comparator<Item> comparator = (item1, item2) -> {
        List<String> weatherPriority = priorities.get(weather.toLowerCase());
        boolean item1IsPriority = weatherPriority.contains(item1.itemId());
        boolean item2IsPriority = weatherPriority.contains(item2.itemId());

        if (item1IsPriority && !item2IsPriority) {
            return -1;
        } else if (!item1IsPriority && item2IsPriority) {
            return 1;
        } else {
            return 0;
        }
    };

    // neutral sorting 
    recommendations.sort(comparator);
        return recommendations.toArray(PredictedItem[]::new);
    }


}
